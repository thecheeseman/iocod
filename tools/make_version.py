#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2007 TTimo
# SPDX-FileCopyrightText: 2023 thecheeseman
#
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-License-Identifier: GPL-3.0-or-later

# Modified from https://github.com/TTimo/GtkRadiant/blob/1.6-release/makeversion.py

import sys, re, string, os, subprocess

version_file = 'VERSION'
header_file = 'src/core/include/core/version.h'

#
# read version data from root file
#
def get_version():
    f = open(version_file, 'r')

    data = f.read().strip()
    line = data.split('\n')[0]
    f.close()

    sys.stdout.write("File %s contains string: \"%s\"\n" % (version_file, line))

    # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    exp = re.compile('^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$')
    if exp.match(line) is None:
        sys.stderr.write("Error: invalid version string\n")
        sys.exit(1)

    (major, minor, patch, prerelease, buildmetadata) = exp.match(line).groups()
    sys.stdout.write("Parsed string as:\n  Major: %s\n  Minor: %s\n  Patch: %s\n  Prerelease: %s\n  Build Metadata: %s\n" % (major, minor, patch, prerelease, buildmetadata))

    return (major, minor, patch, prerelease, buildmetadata)

#
# get git info
#
def get_git_info():
    commithash = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode('utf-8').strip()
    sys.stdout.write("Git commit hash: %s\n" % commithash)

    branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode('utf-8').strip()
    sys.stdout.write("Git branch: %s\n" % branch)

    commits = subprocess.check_output(['git', 'rev-list', '--count', 'HEAD']).decode('utf-8').strip()
    sys.stdout.write("Git commits: %s\n" % commits)

    return (commithash, branch, commits)

#
# write version header
#
def make_version():
    (major, minor, patch, prerelease, buildmetadata) = get_version()
    (commithash, branch, commits) = get_git_info()

    f = open(header_file, 'w')

    f.write(
"""// SPDX-FileCopyrightText: 2023 thecheeseman
//
// SPDX-License-Identifier: GPL-3.0-or-later

#ifndef CORE_VERSION_H
#define CORE_VERSION_H

// ** Autogenerated by tools/make_version.py **
""")

    f.write('#define IOCOD_VERSION_MAJOR %s\n' % major)
    f.write('#define IOCOD_VERSION_MINOR %s\n' % minor)
    f.write('#define IOCOD_VERSION_PATCH %s\n' % patch)

    if prerelease is not None:
        f.write('#define IOCOD_VERSION_PRERELEASE "%s"\n' % prerelease)
    else:
        f.write('//#define IOCOD_VERSION_PRERELEASE\n')

    if buildmetadata is not None:
        f.write('#define IOCOD_VERSION_BUILD_METADATA "%s"\n' % buildmetadata)
    else:
        f.write('//#define IOCOD_VERSION_BUILD_METADATA\n')

    if commithash is not None:
        f.write('#define IOCOD_VERSION_GIT_COMMIT_HASH "%s"\n' % commithash)
    else:
        f.write('//#define IOCOD_VERSION_GIT_COMMIT_HASH\n')

    if branch is not None:
        f.write('#define IOCOD_VERSION_GIT_BRANCH      "%s"\n' % branch)
    else:
        f.write('//#define IOCOD_VERSION_GIT_BRANCH\n')

    if commits is not None:
        f.write('#define IOCOD_VERSION_GIT_COMMITS     "%s"\n' % commits)
    else:
        f.write('//#define IOCOD_VERSION_GIT_COMMITS\n')

    f.write(
"""// ** Autogenerated by tools/make_version.py **

#define IOCOD_VERSION \\
    IOCOD_VERSION_ENCODE(IOCOD_VERSION_MAJOR, IOCOD_VERSION_MINOR, IOCOD_VERSION_PATCH)

// clang-format off
#define IOCOD_VERSION_STRING \\
    IOCOD_VERSION_DECODE_MAJOR(IOCOD_VERSION) "." \\
    IOCOD_VERSION_DECODE_MINOR(IOCOD_VERSION) "." \\
    IOCOD_VERSION_DECODE_PATCH(IOCOD_VERSION)
// clang-format on

#ifdef IOCOD_VERSION_PRERELEASE
    #ifdef IOCOD_VERSION_BUILD_METADATA
        #define IOCOD_VERSION_STRING_FULL \\
            IOCOD_VERSION_STRING "-" IOCOD_VERSION_PRERELEASE "+" IOCOD_VERSION_BUILD_METADATA
    #else
        #define IOCOD_VERSION_STRING_FULL IOCOD_VERSION_STRING "-" IOCOD_VERSION_PRERELEASE
    #endif
#else
    #define IOCOD_VERSION_STRING_FULL IOCOD_VERSION_STRING
#endif

#if defined(IOCOD_VERSION_GIT_COMMITS) && defined(IOCOD_VERSION_GIT_COMMIT_HASH) && \\
    defined(IOCOD_VERSION_GIT_BRANCH)
    #define IOCOD_VERSION_BUILD                                          \\
        "build " IOCOD_VERSION_GIT_COMMITS " (" IOCOD_VERSION_GIT_BRANCH \\
        "-" IOCOD_VERSION_GIT_COMMIT_HASH ")"
#else
    #define IOCOD_VERSION_BUILD ""
#endif

/// @def IOCOD_VERSION_ENCODE
/// Encode version number into single value.
#define IOCOD_VERSION_ENCODE(major, minor, revision) \\
    (((major) *1000000) + ((minor) *1000) + (revision))

/// @def IOCOD_VERSION_DECODE_MAJOR
/// Decode the major version from the full version value.
#define IOCOD_VERSION_DECODE_MAJOR(version) ((version) / 1000000)

/// @def IOCOD_VERSION_DECODE_MINOR
/// Decode the minor version from the full version value.
#define IOCOD_VERSION_DECODE_MINOR(version) ((version % 1000000) / 1000)

/// @def IOCOD_VERSION_DECODE_PATCH
/// Decode the patch number from the full version value.
#define IOCOD_VERSION_DECODE_PATCH(version) ((version) % 1000)

#endif // CORE_VERSION_H
""")

    f.close()

    sys.stdout.write('Wrote %s\n' % header_file)

#
# main
#
if __name__ == '__main__':
    cwd = os.path.dirname(os.path.realpath(__file__))
    if cwd.endswith('Tools'):
        os.chdir('..')

    make_version()
