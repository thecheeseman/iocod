# iocod
# Copyright (C) 2021-2022 thecheeseman
# 
# This file is part of the iocod GPL source code.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

cmake_minimum_required(VERSION 3.13)
project("iocod" C)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)

message(STATUS "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "CMAKE_BUILD_TYPE not specified, default is 'Debug'")
  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build" FORCE)
else()
  message(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
  set(DEBUG 1)
else()
  set(DEBUG 0)
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/out)
foreach(CFGNAME ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER ${CFGNAME} CFGNAME)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/out)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/out)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/out)
endforeach()

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
  STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")

#
# main options
#
option(COMPILE_32_BIT "Compile 32-bit binaries and game dll" OFF)
option(DISABLE_CURL "Disable cURL library support" OFF)
option(DISABLE_AUTO_UPDATE "Disable auto-update feature" OFF)
option(USE_LUA "Use Lua as scripting language instead of GSC" OFF)

#
# testing-only options
#
if (DEBUG)
    option(BUILD_PRELOAD "Build preload library" OFF)
    option(BUILD_PROTOTYPEGEN "Build script prototype generator" OFF) 
    option(BUILD_TESTS "Build tests" ON)
endif()

#
# check whether we're building for 64-bit or 32-bit
# if the toolchain isn't specified (i.e. COMPILE_32_BIT isn't defined)
# then let's just make sure we're actually on a 64-bit system
#
set(COMPILE_64_BIT FALSE)
if (COMPILE_32_BIT)
    include(CheckCSourceCompiles)

    check_c_source_compiles("
    #include <stdlib.h>

    int main(void)
    {
        if (sizeof(void *) == 8)
            return 1;

        return 0;
    }" ON_64_BIT_SYSTEM)

    if (ON_64_BIT_SYSTEM)
        set(COMPILE_64_BIT TRUE)
    endif()
endif()

#
# if we're building from a git clone, then we can use git versioning
# if we don't have git available, then assuming we downloaded from
# the repo anyway, the build_number header probably already exists
#
find_package(Git)
if (Git_FOUND)
    # grab the total number of commits since the 'build' tag (first tag)
    execute_process(COMMAND ${GIT_EXECUTABLE} describe --match build
        OUTPUT_VARIABLE DESCRIBE_BUILD OUTPUT_STRIP_TRAILING_WHITESPACE
        RESULT_VARIABLE DESCRIBE_RESULT)

    if (RESULT_VARIABLE EQUAL 0)
        string(REGEX MATCH "[0-9.]+" BUILD_NUMBER ${DESCRIBE_BUILD})
        string(REGEX MATCH "([a-zA-Z0-9]+)$" BUILD_HASH ${DESCRIBE_BUILD})

        # grab the actual version number now
        execute_process(COMMAND ${GIT_EXECUTABLE} describe --always --tags --dirty
            OUTPUT_VARIABLE DESCRIBE_BUILD OUTPUT_STRIP_TRAILING_WHITESPACE)
        string(REGEX MATCH "[0-9\.]+" VERSION_NUMBER ${DESCRIBE_BUILD})

        # spit out to header
        file(WRITE "src/include/build_number.h" 
"// This file is autogenerated by CMake\n\n \
#ifndef __BUILD_NUMBER_H__\n \
#define __BUILD_NUMBER_H__\n\n \
#define BUILD_NUMBER \"${BUILD_NUMBER}\"\n \
#define BUILD_HASH \"${BUILD_HASH}\"\n \
#define VERSION_NUMBER \"${VERSION_NUMBER}\"\n \
#define BUILD_INFO \"v\" VERSION_NUMBER \"-\" BUILD_NUMBER \"-\" BUILD_HASH \"\"\n \ 
#endif // __BUILD_NUMBER_H__")
    endif()
endif()

#
# curl package stuff
#
set(CURL_LINK)
if (NOT DISABLE_CURL)
    find_package(CURL)
    if (CURL_FOUND)
        include_directories(${CURL_INCLUDE_DIR})
        SET(CURL_LINK "-lcurl")
    else()
        set(DISABLE_CURL ON)
        add_compile_options(-DDISABLE_CURL)
    endif()
else()
    add_compile_options(-DDISABLE_CURL)
endif()

if (DISABLE_AUTO_UPDATE)
    add_compile_options(-DDISABLE_AUTO_UPDATE)
endif()

#
# lua
#
set(LUA_LINK)
if (USE_LUA)
    find_package(Lua REQUIRED)

    if (LUA_FOUND)
        set(LUA_LINK "-llua5.3")
        include_directories(${LUA_INCLUDE_DIR})
        add_compile_options(-DUSE_LUA)
    endif()
endif()

set(THREADS_LINK)
set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_package(Threads)
if (Threads_FOUND)
    set(THREADS_LINK ${CMAKE_THREAD_LIBS_INIT})
    add_compile_options(-DENABLE_THREADING)
endif()

#
# headers
#
include_directories("src/external")
include_directories("src/include")
include_directories("src")

#
# compile options
# this needs to be before add_exectuable / add_library
#

# build options from q3
# -O3 -ffast-math -fomit-frame-pointer -fno-strict-aliasing
if (WIN32)
    add_compile_options(/W3)
else()
    add_compile_options(-Wall -Wextra -Wformat=2 -Wformat-overflow=2)
endif()

#
# main dedicated server
#
add_executable(iocod "")

#
# game library 
#
add_library(game SHARED "")

#
# main source directory
#
add_subdirectory("src")

#
# various options from above
#
if (BUILD_PRELOAD AND UNIX AND NOT COMPILE_64_BIT)
    add_subdirectory("preload") # preload library if we're on unix/32bit only
endif()

if (BUILD_PROTOTYPEGEN)
    add_subdirectory("prototypegen") # prototype generators for scripts
endif()

if (BUILD_TESTS)
    add_subdirectory("tests") # test suites
endif()

#
#
#
set(DLL_PLAT "x86_64")
set(DLL_EXT "so")
set(DLL_SPACER ".")

if (WIN32)
    if (NOT COMPILE_64_BIT)
        set(DLL_PLAT "x86")

        target_compile_options(iocod PRIVATE -DWIN32)
        target_compile_options(game PRIVATE -DWIN32)
        target_link_options(iocod PRIVATE -DWIN32)
        target_link_options(game PRIVATE -DWIN32)
    endif()

    set(DLL_SPACER "_")
    set(DLL_EXT "dll")
else()
    if (NOT COMPILE_64_BIT)
        set(DLL_PLAT "i386")

        target_compile_options(iocod PRIVATE -m32)
        target_compile_options(game PRIVATE -m32)
        target_link_options(iocod PRIVATE -m32)
        target_link_options(game PRIVATE -m32)
    endif()
endif()

set(DLL_OUT_NAME "game${DLL_SPACER}mp${DLL_SPACER}${DLL_PLAT}")

#
# any linux specific library linkage
#
if (UNIX)
    target_link_libraries(iocod ${CMAKE_DL_LIBS} ${CURL_LINK} ${LUA_LINK} ${THREADS_LINK} m)
    target_link_libraries(game ${CURL_LINK} ${LUA_LINK} ${THREADS_LINK} m)
else()
    target_link_libraries(iocod ${CURL_LINK} ${LUA_LINK} ${THREADS_LINK} )
    target_link_libraries(game ${CURL_LINK} ${LUA_LINK} ${THREADS_LINK} m)
endif()
