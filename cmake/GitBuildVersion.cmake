#
# if we're building from a git clone, then we can use git versioning
# if we don't have git available, then assuming we downloaded from
# the repo anyway, the build_number header probably already exists
#
macro(git_build_version)
    find_package(Git)
    if (Git_FOUND)
        # grab the total number of commits since the 'build' tag (first tag)
        execute_process(COMMAND ${GIT_EXECUTABLE} describe --match build
            OUTPUT_VARIABLE DESCRIBE_BUILD OUTPUT_STRIP_TRAILING_WHITESPACE
            RESULT_VARIABLE DESCRIBE_RESULT)

        if (DESCRIBE_RESULT EQUAL 0)
            string(REGEX MATCH "[0-9.]+" BUILD_NUMBER ${DESCRIBE_BUILD})
            string(REGEX MATCH "([a-zA-Z0-9]+)$" BUILD_HASH ${DESCRIBE_BUILD})

            # grab the actual version number now
            execute_process(COMMAND ${GIT_EXECUTABLE} describe --always --tags --dirty
                OUTPUT_VARIABLE DESCRIBE_BUILD OUTPUT_STRIP_TRAILING_WHITESPACE)
            string(REGEX MATCH "[0-9\.]+" VERSION_STRING ${DESCRIBE_BUILD})

            # split out into constituent parts
            string(REGEX MATCHALL "[0-9]+" NUMBERS ${VERSION_STRING})

            list(GET NUMBERS 0 VERSION_MAJOR)
            list(GET NUMBERS 1 VERSION_MINOR)
            list(GET NUMBERS 2 VERSION_PATCH)

            # spit out to header
            file(WRITE "src/include/build_number.h" 
"/* This file is autogenerated by CMake */\n\n \
#ifndef INCLUDE_BUILD_NUMBER_H\n \
#define INCLUDE_BUILD_NUMBER_H\n\n \
#define IOCOD_BUILD_NUMBER \"${BUILD_NUMBER}\"\n \
#define IOCOD_BUILD_HASH \"${BUILD_HASH}\"\n \
#define IOCOD_VERSION_MAJOR ${VERSION_MAJOR}\n \
#define IOCOD_VERSION_MINOR ${VERSION_MINOR}\n \
#define IOCOD_VERSION_PATCH ${VERSION_PATCH}\n \
#define IOCOD_VERSION ((IOCOD_VERSION_MAJOR * 1000000) + (IOCOD_VERSION_MINOR * 1000) + IOCOD_VERSION_PATCH)\n \
#define IOCOD_VERSION_STRING \"${VERSION_STRING}\"\n \
#define IOCOD_BUILD_INFO \"v\" IOCOD_VERSION_STRING \"-\" IOCOD_BUILD_NUMBER \"-\" IOCOD_BUILD_HASH \"\"\n \ 
#endif /* INCLUDE_BUILD_NUMBER_H */")
        endif()
    endif()
endmacro()
