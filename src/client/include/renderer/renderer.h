// SPDX-FileCopyrightText: 2023 thecheeseman
//
// SPDX-License-Identifier: GPL-3.0-or-later

#ifndef RENDERER_RENDERER_H
#define RENDERER_RENDERER_H

#include <core/types.h>

namespace iocod {

class IRenderer {
public:
    virtual ~IRenderer() = default;

    virtual void Initialize() = 0;
    virtual void Shutdown() = 0;

    // TODO: deal with this absolute insanity
    #if 0
    virtual void GL_Bind(int p1) = 0;
    virtual void GL_BindFragmentShaderATI(int p1) = 0;
    virtual void GL_CheckErrors() = 0;
    virtual void GL_ClientState(u32 p1) = 0;
    virtual void GL_Cull(int p1) = 0;
    virtual void GL_DrawElementArrayATI(int p1, int p2) = 0;
    virtual void GL_DrawElements(int p1, int p2) = 0;
    virtual void GL_DrawRangeElements(int p1, int p2, int p3, int p4) = 0;
    virtual void GL_Normalize(int p1) = 0;
    virtual void GL_SelectTexture(int p1) = 0;
    virtual void GL_SetDefaultState() = 0;
    virtual void GL_SetupVBO() = 0;
    virtual void GL_State(u32 p1) = 0;
    virtual void GL_TexEnv(int p1) = 0;
    virtual void GL_TextureMode(char* p1) = 0;
    virtual void glAlphaFragmentOp1ATI(int p1, int p2, u32 p3, u32 p4, u32 p5, u32 p6) = 0;
    virtual void glAlphaFragmentOp2ATI(int p1, int p2, u32 p3, u32 p4, u32 p5, u32 p6, u32 p7,
                                       u32 p8, u32 p9) = 0;
    virtual void glAlphaFragmentOp3ATI(int p1, int p2, u32 p3, u32 p4, u32 p5, u32 p6, u32 p7,
                                       u32 p8, u32 p9, u32 p10, u32 p11, u32 p12) = 0;
    virtual void glArrayObjectATI() = 0;
    virtual void glBeginFragmentShaderATI() = 0;
    virtual void glBindFragmentShaderATI() = 0;
    virtual void glColorFragmentOp1ATI(int p1, int p2, u32 p3, u32 p4, u32 p5, u32 p6, u32 p7) = 0;
    virtual void glColorFragmentOp2ATI(int p1, int p2, u32 p3, u32 p4, u32 p5, u32 p6, u32 p7,
                                       u32 p8, u32 p9, u32 p10) = 0;
    virtual void glColorFragmentOp3ATI(int p1, int p2, u32 p3, u32 p4, u32 p5, u32 p6, u32 p7,
                                       u32 p8, u32 p9, u32 p10, u32 p11, u32 p12, u32 p13) = 0;
    virtual void glDeleteFragmentShaderATI() = 0;
    virtual void glEndFragmentShaderATI() = 0;
    virtual void glFreeObjectBufferATI() = 0;
    virtual int glGenFragmentShadersATI(int p1) = 0;
    virtual void GLimp_AglDescribe_f__Fv() = 0;
    virtual void GLimp_AglState_f__Fv() = 0;
    virtual int GLimp_ChangeMode__Fi() = 0;
    virtual void GLimp_EndFrame() = 0;
    virtual void GLimp_Extensions__Fv() = 0;
    virtual void GLimp_Init() = 0;
    virtual void GLimp_InitGamma__Fv() = 0;
    virtual void GLimp_LogComment() = 0;
    virtual void GLimp_pause() = 0;
    virtual void GLimp_resume() = 0;
    virtual void GLimp_SetGameGamma() = 0;
    virtual void GLimp_SetGamma(byte* p1, byte* p2, byte* p3) = 0;
    virtual void GLimp_Shutdown() = 0;
    virtual void GlobalPositionToLocal(float* p1, float* p2) = 0;
    virtual void GlobalVectorToLocal(float* p1, float* p2) = 0;
    virtual void glPassTexCoordATI(int p1, u32 p2, int p3) = 0;
    virtual void glSampleMapATI(int p1, u32 p2, int p3) = 0;
    virtual void glSetFragmentShaderConstantATI(int p1, float* p2) = 0;
    virtual void glUpdateObjectBufferATI() = 0;
    virtual void R_AABBTreeSurfaces_r(float* p1, float* p2, float* p3, int p4, int p5, int* p6) = 0;
    virtual void R_AddAABBTreeSurfaces_r(float* p1, float* p2, int p3, u32 p4, int p5) = 0;
    virtual void R_AddBrushModelSurfaces(int p1) = 0;
    virtual void R_AddCellCullGroups(int p1, float* p2, int p3, u32 p4) = 0;
    virtual void R_AddCellOccluders(int p1, float* p2, int p3) = 0;
    virtual void R_AddCellSurfaces(int p1, float* p2, int p3, u32 p4) = 0;
    virtual void R_AddCoronas(float* p1, int p2) = 0;
    virtual void R_AddDebugBox(int* p1, int* p2, double* p3) = 0;
    virtual void R_AddDebugLine(double* p1, double* p2, double* p3) = 0;
    virtual void R_AddDebugPolygon(double* p1, int p2, void* p3) = 0;
    virtual void R_AddDebugString(double* p1, double* p2, int p3, char* p4) = 0;
    virtual void R_AddDrawSurf(int p1, int p2, int p3, u32 p4, int p5, int p6) = 0;
    virtual void R_AddDrawSurfCmd(int p1, int p2) = 0;
    virtual void R_AddEdgeDef(int p1, int p2, int p3) = 0;
    virtual void R_AddEntityDrawSurf(int p1, int p2, int p3, int p4) = 0;
    virtual void R_AddEntitySurfaces() = 0;
    virtual int R_AddMarkFragment(int p1, int p2, int p3, float* p4, int p5, int p6, double* p7,
                                  int p8) = 0;
    virtual void R_AddModelToCell(int p1, int p2, double* p3, double* p4) = 0;
    virtual void R_AddModelToCell(int p1, int p2, int p3) = 0;
    virtual void R_AddPolygonSurfaces() = 0;
    virtual void R_AddScaledDebugString(double* p1, double* p2, char* p3) = 0;
    virtual void R_AddSkySurfacesDPVS() = 0;
    virtual bool R_AddSortedHistoryEntry(int* p1, int p2) = 0;
    virtual void R_AddStaticModelSurfaces(char* p1) = 0;
    virtual void R_AddStaticModelToWorld(int p1) = 0;
    virtual void R_AddTrianglesSurface(int* p1, u32 p2, float* p3, int p4, int p5) = 0;
    virtual void R_AddWorldSurfaceNoCull(int* p1, u32 p2) = 0;
    virtual void R_AddWorldSurfacesDPVS() = 0;
    virtual void R_AddXModelSurfaces(int p1) = 0;
    virtual void R_AdjustBoundsForAutosprite(int p1, float* p2, float* p3) = 0;
    virtual void R_AllocClipPlanes() = 0;
    virtual char* R_AllocImage(char* p1, int p2, short p3, short p4, int p5, int p6) = 0;
    virtual int R_AllocMemoryATI(int p1, int p2, int* p3) = 0;
    virtual int R_AllocMemoryNV(int p1, int p2, int* p3) = 0;
    virtual int R_AllocModel() = 0;
    virtual void R_AllocStaticModelCacheARB() = 0;
    virtual void R_AllocStaticModelCacheATI() = 0;
    virtual void R_AllocStaticModelCacheGeneric() = 0;
    virtual void R_AllocStaticModelCacheNV() = 0;
    virtual int R_AllocTempMemory() = 0;
    virtual void R_BeginDelayedImageGroup() = 0;
    virtual void R_BlendOverTexture(ushort* p1, u32 p2, byte* p3, int p4) = 0;
    virtual void R_BlendOverTexture_RGBA(byte* p1, u32 p2, byte* p3) = 0;
    virtual void R_BlendOverTexture_S3TC(ushort* p1, int p2, byte* p3, int p4) = 0;
    virtual void R_BModelWorldBounds(int p1, float* p2, float* p3) = 0;
    virtual void R_BoxSurfaces_r(int p1, float* p2, float* p3, int* p4, int p5, int* p6) = 0;
    virtual u32 R_BuildLightmapMergability(u32* p1, u32* p2, int p3) = 0;
    virtual void R_BuildShaderFromImage(int p1, int p2) = 0;
    virtual void R_BuildSkyBox(void* p1) = 0;
    virtual char* R_CacheableStaticModelShader(char* p1) = 0;
    virtual int* R_CacheStaticModelSurface(int p1, int p2, int p3, int p4, float* p5) = 0;
    virtual int R_CanOptimizeStaticModelStage(int p1, int p2) = 0;
    virtual int R_CellForCamera() = 0;
    virtual void R_CellSurfaces(int p1, float* p2, float* p3, int* p4, int p5, int* p6) = 0;
    virtual void R_ChopPolyBehindPlane(int p1, float* p2, int* p3, void* p4, float* p5) = 0;
    virtual double* R_ChopPortalWinding(double* p1, int* p2, float* p3, double* p4) = 0;
    virtual void R_ClearLightVisCache() = 0;
    virtual void R_ClearSun() = 0;
    virtual void R_ColorShiftLightingBytes(byte* p1, char* p2) = 0;
    virtual void R_CopyLightmap(int p1, byte* p2, int p3, int p4, int p5) = 0;
    virtual int R_CreateBufferARB() = 0;
    virtual void R_CreateBuiltinImages() = 0;
    virtual void R_CreateDefaultImage() = 0;
    virtual void R_CreateDlightImage() = 0;
    virtual char* R_CreateImage(char* p1, int* p2, int p3, int p4, int p5, u32 p6, int p7,
                                float* p8) = 0;
    virtual bool R_CreateImageInternal(char* p1, int* p2, int p3, int p4, float* p5) = 0;
    virtual void R_CreateScreenImage() = 0;
    virtual void R_CreateStaticModel(int p1, char* p2, double* p3, int p4, float* p5,
                                     double* p6) = 0;
    virtual int R_CullBoxDPVS(int p1, float* p2, int p3, int p4) = 0;
    virtual u32 R_CullDlightsForBox(float* p1, float* p2, u32 p3) = 0;
    virtual int R_CullModel(int p1, int p2) = 0;
    virtual void R_CullModels(int p1, float* p2, int p3) = 0;
    virtual int R_CullOccluderByPlane(int p1, float* p2) = 0;
    virtual u32 R_CullPointAndRadius(float* p1) = 0;
    virtual void R_DecomposeSort(u32 p1, u32* p2, u32* p3, int* p4, u32* p5, u32* p6) = 0;
    virtual void R_DeleteBuffersARB() = 0;
    virtual void R_DeleteFragmentShaders() = 0;
    virtual void R_DeleteImage(int p1) = 0;
    virtual void R_DeleteTextures() = 0;
    virtual char* R_DeleteVertexPrograms() = 0;
    virtual void R_DlightBmodel(float* p1) = 0;
    virtual u32 R_DlightSurface(int p1, u32 p2) = 0;
    virtual u32 R_DlightTris(int p1, u32 p2) = 0;
    virtual int R_DObjGetSurfIndex(int p1, int p2) = 0;
    virtual void R_DoneFreeType() = 0;
    virtual void R_DrawElements(int p1, short* p2) = 0;
    virtual void R_DrawStripElements(int p1, short* p2) = 0;
    virtual int R_DrawStrlen(char* p1) = 0;
    virtual void R_EndDelayedImageGroup() = 0;
    virtual void R_EvaluateLightingAtPoint(int p1, float* p2, float* p3, byte* p4) = 0;
    virtual int R_FilterModelIntoCells_r(int p1, int p2, double* p3, double* p4) = 0;
    virtual void R_FilterModelIntoCells_r(int p1, int p2, int p3, double* p4, double* p5) = 0;
    virtual void R_FilterModelsIntoCells(float* p1, int p2) = 0;
    virtual char* R_FindExistingImage(char* p1, int p2, u32 p3, int p4) = 0;
    virtual char* R_FindImageFile(char* p1, int p2, u32 p3, int p4, float* p5) = 0;
    virtual char* R_FindImageInstance(char* p1, int p2, char* p3, int p4, int p5) = 0;
    virtual char* R_FindShader(char* p1, int p2, int p3, int p4) = 0;
    virtual char* R_FindShaderByName(char* p1) = 0;
    virtual void R_FindSunSpriteShader(char* p1) = 0;
    virtual char* R_FindVertexProgram(char* p1) = 0;
    virtual void R_FinishDObjToStaticModel(int p1, int p2) = 0;
    virtual int R_FinishLoadingAABBTrees_r(float* p1, int p2) = 0;
    virtual void R_FinishLoadingStaticModels() = 0;
    virtual void R_FixupXModelTexCoords() = 0;
    virtual void R_FlipImageDiagonally(int p1, int p2, int p3) = 0;
    virtual void R_FlipImageHorizontally(int p1, int p2, int p3) = 0;
    virtual void R_FlipImageVertically(int p1, int p2, int p3) = 0;
    virtual void R_FloatForKey(char* p1, int p2, char* p3, int p4) = 0;
    virtual void R_FlushSun() = 0;
    virtual void R_Fog(int* p1) = 0;
    virtual void R_FogOff() = 0;
    virtual void R_FogOn() = 0;
    virtual void R_FreeClipPlanes() = 0;
    virtual void R_FreeImage(char* p1) = 0;
    virtual void R_FreeImageAllocations() = 0;
    virtual void R_FrustumClipPlanes() = 0;
    virtual int R_FurthestReplaceableRefEntity() = 0;
    virtual void R_GammaCorrect(int p1, u32 p2) = 0;
    virtual void R_GenerateDrawSurfs() = 0;
    virtual int R_GetAsianCode(u32 p1) = 0;
    virtual void R_GetAsianGlyphHeight() = 0;
    virtual void R_GetAsianScale() = 0;
    virtual u32 R_GetCachedVisibility(u32 p1, int p2, u32 p3, u32 p4, int p5, int* p6, double* p7,
                                      char* p8) = 0;
    virtual int* R_GetCharacterGlyph(int p1, u32 p2) = 0;
    virtual int R_GetCommandBuffer(u32 p1) = 0;
    virtual int R_GetEntityToken(char* p1, int p2) = 0;
    virtual void R_GetFontInfo() = 0;
    virtual void R_GetGlyphHorizAdvance(int p1, u32 p2) = 0;
    virtual void R_GetLodDist() = 0;
    virtual int R_GetModeInfo(int* p1, int* p2, float* p3, int p4) = 0;
    virtual int R_GetModelByHandle(int p1) = 0;
    virtual int R_GetPortalOrientations(int p1, int p2, double* p3, double* p4, double* p5,
                                        int* p6) = 0;
    virtual int R_GetShaderByHandle(int p1) = 0;
    virtual void R_GetStaticLightContributions(int p1, float* p2, float* p3, int* p4) = 0;
    virtual char** R_GetWaterTexture(int* p1) = 0;
    virtual void R_GetXModelBounds(int p1, float* p2, float* p3, float* p4) = 0;
    virtual void R_HeightmapImage(int p1, int p2, int p3) = 0;
    virtual void R_ImageList_f() = 0;
    virtual void R_IncrementalRefreshOptimizedWorldSurfaces_ARB() = 0;
    virtual void R_IncrementalRefreshStaticModels_ARB(u32 p1) = 0;
    virtual void R_IncrementalRefreshXModels_ARB(u32 p1) = 0;
    virtual void R_Init() = 0;
    virtual void R_InitAllocators() = 0;
    virtual void R_InitDebug() = 0;
    virtual void R_InitFreeType() = 0;
    virtual void R_InitImages() = 0;
    virtual int R_InitLightVisCacheFromBuffer(u32* p1, int p2) = 0;
    virtual void R_InitLightVisHistory() = 0;
    virtual void R_InitShaders() = 0;
    virtual void R_InitSkyTexCoords() = 0;
    virtual void R_InitStaticModelCache() = 0;
    virtual void R_InitVertexPrograms() = 0;
    virtual void R_InitWater() = 0;
    virtual void R_IssueRenderCommands(int p1) = 0;
    virtual void R_LevelShot() = 0;
    virtual u32 R_LightCacheSkyTrace(float* p1, float* p2) = 0;
    virtual int R_LightCacheTrace(float* p1, float* p2) = 0;
    virtual void R_LightScaleTexture(byte* p1, int p2, int p3, int p4, int p5) = 0;
    virtual void R_LightVisHash(u32 p1, int p2, u32 p3, u32 p4, u32* p5, u32* p6) = 0;
    virtual void R_LightVisHistoryFilename(char* p1) = 0;
    virtual void R_LoadAABBTrees(u32* p1) = 0;
    virtual void R_LoadAsianFont(int p1) = 0;
    virtual void R_LoadCells(u32* p1) = 0;
    virtual void R_LoadCorona(char* p1, int p2) = 0;
    virtual void R_LoadCubeMapImage(int p1, u32 p2, int p3, float* p4) = 0;
    virtual void R_LoadCullGroupIndexes(u32* p1) = 0;
    virtual void R_LoadCullGroups(u32* p1) = 0;
    virtual void R_LoadDelayedImages() = 0;
    virtual void R_LoadEntities() = 0;
    virtual void R_LoadImage(char* p1, int** p2, ushort* p3, ushort* p4, int* p5, int* p6,
                             int p7) = 0;
    virtual void R_LoadLightIndexes(u32* p1) = 0;
    virtual void R_LoadLightmaps(int* p1, u32* p2, int p3) = 0;
    virtual void R_LoadLights() = 0;
    virtual void R_LoadLightVisCache(int* p1) = 0;
    virtual void R_LoadMiscModel(char* p1, int p2) = 0;
    virtual void R_LoadNodesAndLeafs(u32* p1, u32* p2) = 0;
    virtual void R_LoadOccluderIndexes(u32* p1) = 0;
    virtual void R_LoadOccluders(u32* p1, u32* p2, u32* p3) = 0;
    virtual void R_LoadPortals(u32* p1) = 0;
    virtual void R_LoadPortalVerts(u32* p1) = 0;
    virtual void R_LoadShaders(u32* p1) = 0;
    virtual int R_LoadShaderType(char* p1, int p2, int p3) = 0;
    virtual void R_LoadSingleDelayedImage(char* p1) = 0;
    virtual void R_LoadSubmodels(u32* p1) = 0;
    virtual void R_LoadSun_f() = 0;
    virtual void R_LoadSunThroughCvars(int p1) = 0;
    virtual void R_LoadSurfaces(u32* p1, u32* p2, u32* p3, int p4) = 0;
    virtual char* R_LoadVertexProgram(char* p1) = 0;
    virtual void R_LoadXModel(int p1, int p2, int p3) = 0;
    virtual void R_LocalNormalToWorld(float* p1, float* p2) = 0;
    virtual char* R_MangleTextureName(int p1, int p2, u32 p3, float* p4) = 0;
    virtual void R_MaxLightIntensity(float* p1, int p2) = 0;
    virtual void R_MemInfo_f() = 0;
    virtual void R_MergeLights(float* p1, int p2, int p3, int* p4) = 0;
    virtual void R_MergeShaderList(char** p1, int p2, int p3) = 0;
    virtual void R_MergeShadersForImageSheets() = 0;
    virtual int* R_MipMap(char* p1, int* p2, int p3, int p4, int p5, int p6) = 0;
    virtual void R_MipMap2(void* p1, int p2, int p3) = 0;
    virtual void R_MipMap8(byte* p1, int p2, int p3) = 0;
    virtual void R_MirrorPoint(float* p1, float* p2, float* p3, float* p4) = 0;
    virtual void R_MirrorVector(float* p1, int p2, int p3, float* p4) = 0;
    virtual int R_MirrorViewBySurface(u32* p1, int p2) = 0;
    virtual void R_ModelBounds(int p1, double* p2, double* p3) = 0;
    virtual void R_ModelInit() = 0;
    virtual void R_ModeList_f() = 0;
    virtual int R_NeedsBoundsAdjustment(int p1) = 0;
    virtual void R_OptimizeRigidXSurfaceARB(int p1) = 0;
    virtual void R_OptimizeRigidXSurfaceATI(int p1) = 0;
    virtual void R_OptimizeRigidXSurfaceNV(int p1) = 0;
    virtual int R_OptimizeSModelSurfARB(int* p1) = 0;
    virtual int R_OptimizeSModelSurfATI(int* p1) = 0;
    virtual void R_OptimizeSModelSurfGeneric(int* p1) = 0;
    virtual void R_OptimizeSModelSurfNV(int* p1) = 0;
    virtual void R_OptimizeXModelSurfaces() = 0;
    virtual void R_PerformanceCounters() = 0;
    virtual void R_PickFinalLights(int p1, float* p2, int p3, int p4, float* p5, int p6, int** p7,
                                   int p8) = 0;
    virtual void R_PickLights(int p1, float* p2, int p3, int p4, int p5, int p6) = 0;
    virtual u32 R_PicmipForImageFlags(u32 p1) = 0;
    virtual void R_PlaneForSurface(int* p1, double* p2) = 0;
    virtual void R_PointInLeaf(float* p1) = 0;
    virtual int R_PortalBehindAllPlanes(int p1, float* p2, int p3) = 0;
    virtual int R_PortalBehindAnyPlane(int p1, float* p2, int p3) = 0;
    virtual void* R_PortalClipPlanes(float* p1, float* p2, float* p3, float p4, float* p5) = 0;
    virtual void R_PortalClipPlanesInternal(int p1, u32 p2, float* p3) = 0;
    virtual void R_PrecalcLightVisCache() = 0;
    virtual void R_PrecalcLightVisCachePoint(u32 p1, int p2, u32 p3, float* p4, int p5) = 0;
    virtual int R_ReadFile(int p1, int* p2) = 0;
    virtual void R_RecursivePortalWalk(int p1, float* p2, float* p3, float p4, u32 p5) = 0;
    virtual void R_RefreshOptimizedWorldSurfaces_ARB() = 0;
    virtual void R_RefreshStaticModels_ARB(u32 p1) = 0;
    virtual void R_RefreshXModels_ARB(u32 p1) = 0;
    virtual void R_Register() = 0;
    virtual char** R_RegisterStaticModel(char* p1, int p2) = 0;
    virtual void R_RemapTextureCoordinatesForSheet(int p1, float* p2, u32 p3) = 0;
    virtual void R_RememberImageAllocation(int p1, int p2) = 0;
    virtual void R_RenderShadowEdges() = 0;
    virtual void R_RenderView(int p1) = 0;
    virtual void R_ResetImageAllocations() = 0;
    virtual void R_RotateForEntity(int* p1, float* p2, double* p3) = 0;
    virtual void R_RotateForModelEntity(int p1, float* p2, double* p3) = 0;
    virtual void R_RotateForViewer() = 0;
    virtual void R_SampleDiffuseSunVisibility(int p1, float* p2, int p3, int p4) = 0;
    virtual u32* R_SampleLightVisibility(int p1, float* p2, int p3, int* p4, float* p5) = 0;
    virtual void R_SaveGameShot(int p1) = 0;
    virtual void R_SaveLightVisHistory() = 0;
    virtual void R_SaveSun_f() = 0;
    virtual void R_SaveSunFromCvars(int p1) = 0;
    virtual void R_ScreenShot_f() = 0;
    virtual void R_ScreenshotFilename(int p1, char* p2) = 0;
    virtual void R_ScreenshotFilenameJPEG(int p1, char* p2) = 0;
    virtual void R_ScreenShotJPEG_f() = 0;
    virtual void R_SetColorMappings() = 0;
    virtual void R_SetFog(int p1, u32 p2, u32 p3) = 0;
    virtual void R_SetFogColor() = 0;
    virtual void R_SetFrameFog() = 0;
    virtual void R_SetHwLightGlobals() = 0;
    virtual void R_SetImageGroupTileMode(int p1) = 0;
    virtual void R_SetImageGroupTriCount(int p1) = 0;
    virtual void R_SetNVFogMode() = 0;
    virtual void R_SetParentAndCell(int* p1, int p2) = 0;
    virtual void R_SetPlaneSidesDPVS(int* p1) = 0;
    virtual void R_SetSceneRefEntity(int p1, int p2, int p3) = 0;
    virtual void R_SetSkyBox(int p1) = 0;
    virtual void R_SetSunFromCvars() = 0;
    virtual void R_SetSunSpriteSize() = 0;
    virtual char** R_SetupDObjToStaticModel(char* p1, int p2) = 0;
    virtual void R_SetupDPVS() = 0;
    virtual void R_SetupEntityLighting(int p1, int p2, int p3, int p4, int p5, int p6) = 0;
    virtual void R_SetupFrustum() = 0;
    virtual void R_SetupProjection() = 0;
    virtual void R_SetupStaticModelLighting(int p1, int p2, int p3, int p4, int p5, int p6) = 0;
    virtual void R_SetupTextureCoordinateRemap(int p1, float* p2, float* p3, int* p4, int* p5) = 0;
    virtual void R_SetupTransformMatrix() = 0;
    virtual void R_ShaderList_f() = 0;
    virtual void R_ShowLeafLights(int p1, int p2) = 0;
    virtual void R_ShowLightVisCachePoints() = 0;
    virtual void R_ShutdownAllocators() = 0;
    virtual void R_ShutdownDebug() = 0;
    virtual void R_ShutdownStaticModels() = 0;
    virtual u32 R_SkyTracePassed(float* p1) = 0;
    virtual void R_SortDrawSurfs(u32* p1, u32 p2) = 0;
    virtual int R_SortedHistoryEntry(short p1, short p2, ushort p3, int p4) = 0;
    virtual void R_StaticModelCacheFlush_f() = 0;
    virtual void R_StaticModelCacheStats_f() = 0;
    virtual void R_SumOfUsedImages(int* p1, int* p2, int* p3) = 0;
    virtual void R_SunHelp_f() = 0;
    virtual void R_SyncRenderThread() = 0;
    virtual void R_TakeScreenshot(int p1, int p2, int p3, int p4) = 0;
    virtual void R_TakeScreenshotJPEG() = 0;
    virtual void R_TexImage2D(int p1, int p2, int p3, int p4, int p5) = 0;
    virtual void R_Text_GetConsoleIcon(short* p1, int* p2, int* p3, int p4, float* p5, float* p6,
                                       int* p7, float* p8) = 0;
    virtual int R_Text_GetConsoleString(short* p1, int* p2, int* p3, short** p4, float* p5) = 0;
    virtual void R_Text_PaintConsoleIcon() = 0;
    virtual void R_ToggleSmpFrame() = 0;
    virtual void R_TransformClipToWindow(float* p1, int p2, float* p3, float* p4) = 0;
    virtual void R_TransformDlights(int p1, int p2, float* p3) = 0;
    virtual void R_TransformHomogenousModelToClip(float* p1, float* p2, float* p3, float* p4,
                                                  float* p5) = 0;
    virtual void R_TransformModelToClip(float* p1, float* p2, float* p3, float* p4, float* p5) = 0;
    virtual void R_UnmangleTextureName(char* p1, char* p2, char* p3, int p4, int p5, int* p6,
                                       int* p7) = 0;
    virtual void R_UpdateDelayLoadImage(char* p1, int p2, int p3) = 0;
    virtual void R_UpdateOverTime(int p1, int p2, u32 p3, u32 p4, u32 p5) = 0;
    virtual void R_UsedCachedStaticModelSurface(int p1) = 0;
    virtual int R_ValueForKey(char* p1, int p2, int p3) = 0;
    virtual void R_VboRefresh_f() = 0;
    virtual void R_VC_Stats_f() = 0;
    virtual bool R_VectorForKey(char* p1, char* p2, int p3, int p4, int p5) = 0;
    virtual void R_XModelDebug(int p1, int p2) = 0;
    virtual void R_XModelDebugAxes(int p1, int p2) = 0;
    virtual void R_XModelDebugBoxes(int p1, int p2) = 0;
    virtual int R_XModelIsHuge(float* p1, float* p2) = 0;
    virtual void R_XModelWorldBounds(int p1, float* p2, float* p3) = 0;
    virtual void RB_AddCoronaFlares() = 0;
    virtual void RB_AddDlightFlares() = 0;
    virtual void RB_AddFlare(int* p1, float* p2) = 0;
    virtual void RB_AddPlumeStrings() = 0;
    virtual void RB_AddQuadStamp(int p1, float* p2, float* p3, int* p4) = 0;
    virtual void RB_AddQuadStampExt(int p1, float* p2, float* p3, int* p4) = 0;
    virtual void RB_AddSunEffects() = 0;
    virtual void RB_BeginDrawingView() = 0;
    virtual void RB_BeginImmediateMode() = 0;
    virtual void RB_BeginSurface(int p1, int p2) = 0;
    virtual void RB_BindAnimatedImage(int* p1) = 0;
    virtual int RB_BlendSavedScreen(int p1) = 0;
    virtual void RB_BuildCloudData(int p1) = 0;
    virtual void RB_BuildDlightArrays(int p1, float* p2, char* p3, ushort* p4) = 0;
    virtual void RB_CalcAlphaFromEntity(int p1) = 0;
    virtual void RB_CalcAlphaFromOneMinusEntity(int p1) = 0;
    virtual void RB_CalcBulgeVertexes(int p1) = 0;
    virtual void RB_CalcColorFromEntity(u32* p1) = 0;
    virtual void RB_CalcColorFromOneMinusEntity(int* p1) = 0;
    virtual void RB_CalcCubeMapBumpmapFrameTexCoords(double* p1) = 0;
    virtual void RB_CalcCubeMapDot3ReflectTexCoords(int* p1, int p2) = 0;
    virtual void RB_CalcCubeMapEyeToVertexTexCoords(float* p1) = 0;
    virtual void RB_CalcCubeMapLightHalfAngleTexCoords(float* p1) = 0;
    virtual void RB_CalcCubeMapLightVectorTexCoords(float* p1) = 0;
    virtual void RB_CalcCubeMapNegateTexCoords(float* p1) = 0;
    virtual void RB_CalcCubeMapReflectionTexCoords(float* p1) = 0;
    virtual void RB_CalcCubeMapSunHalfAngleTexCoords(float* p1) = 0;
    virtual void RB_CalcCubeMapTbnTexCoords(int* p1, int p2) = 0;
    virtual void RB_CalcCubeMapVertexToEyeTexCoords(float* p1) = 0;
    virtual void RB_CalcDeformNormals(int p1) = 0;
    virtual void RB_CalcDeformSyncNormals(int p1) = 0;
    virtual void RB_CalcDeformVertexes(int p1) = 0;
    virtual void RB_CalcDiffuseColor(int p1) = 0;
    virtual void RB_CalcEnvironmentTexCoords(float* p1) = 0;
    virtual void RB_CalcFlapVertexes(int p1, int p2) = 0;
    virtual void RB_CalcMoveVertexes(int p1) = 0;
    virtual void RB_CalcRotateTexCoords(int p1, float* p2) = 0;
    virtual void RB_CalcScaleTexCoords(float* p1, float* p2) = 0;
    virtual void RB_CalcScrollTexCoords(float* p1, float* p2) = 0;
    virtual void RB_CalcSpecularAlpha() = 0;
    virtual void RB_CalcStretchTexCoords(int* p1, float* p2) = 0;
    virtual void RB_CalcSunBlind(int p1, float* p2, float* p3) = 0;
    virtual void RB_CalcSunFlare() = 0;
    virtual void RB_CalcSwapTexCoords(float* p1) = 0;
    virtual void RB_CalcTangentSpace() = 0;
    virtual void RB_CalcTransformTexCoords(int p1, float* p2) = 0;
    virtual void RB_CalcTurbulentTexCoords(int p1, float* p2) = 0;
    virtual void RB_CalcWaveAlpha(int* p1, int p2) = 0;
    virtual void RB_CalcWaveColor(int* p1, int* p2) = 0;
    virtual void RB_CheckOverflow(int p1, int p2) = 0;
    virtual void RB_CheckOverflow_Optimized() = 0;
    virtual void RB_ChooseSurfaceCountColor(int p1, char* p2) = 0;
    virtual void RB_ClipSkyPolygons(int p1) = 0;
    virtual void RB_ComputeColors() = 0;
    virtual void RB_ComputeTexCoords(int p1) = 0;
    virtual void RB_DeformTessGeometry() = 0;
    virtual void RB_DisableClientTmu(u32 p1) = 0;
    virtual void RB_DisableTMU(int p1) = 0;
    virtual void RB_DlightFallback(int p1) = 0;
    virtual int RB_DrawBuffer(int p1) = 0;
    virtual void RB_DrawDebug() = 0;
    virtual void RB_DrawDebugLines(int p1, int p2) = 0;
    virtual void RB_DrawDebugPolys() = 0;
    virtual void RB_DrawDebugStrings(int p1, int p2) = 0;
    virtual int RB_DrawQuadPic(int p1) = 0;
    virtual void RB_DrawStretchPic() = 0;
    virtual void RB_DrawSun() = 0;
    virtual void RB_DrawSunSprite() = 0;
    virtual int* RB_DrawSurfs(int* p1) = 0;
    virtual void RB_EnableClientTmu(u32 p1) = 0;
    virtual void RB_EnableClientTmuATI(u32 p1) = 0;
    virtual bool RB_EnableHWLights() = 0;
    virtual void RB_EnableTMU(int p1, int* p2) = 0;
    virtual void RB_EndImmediateMode() = 0;
    virtual void RB_EndMultitexture() = 0;
    virtual void RB_EndSurface() = 0;
    virtual void RB_EndSurface_CachedStaticModelARB() = 0;
    virtual void RB_EndSurface_CachedStaticModelATI() = 0;
    virtual void RB_EndSurface_CachedStaticModelGeneric() = 0;
    virtual void RB_EndSurface_CachedStaticModelNV() = 0;
    virtual void RB_EndSurface_Optimized() = 0;
    virtual void RB_EndSurface_OptimizedARB() = 0;
    virtual void RB_EndSurface_OptimizedATI() = 0;
    virtual void RB_EndSurface_OptimizedGeneric() = 0;
    virtual void RB_EndSurface_OptimizedNV() = 0;
    virtual void RB_ExecuteRenderCommands(int* p1) = 0;
    virtual void RB_FinishFenceNV() = 0;
    virtual int RB_GetAnimatedImage(int p1, int* p2) = 0;
    virtual int RB_GetBuffersNV(int p1) = 0;
    virtual void RB_glBegin(int p1) = 0;
    virtual void RB_glColor3f() = 0;
    virtual void RB_glColor3fv() = 0;
    virtual void RB_glColor4f() = 0;
    virtual void RB_glColor4fv() = 0;
    virtual void RB_glEnd() = 0;
    virtual void RB_glLineWidth() = 0;
    virtual void RB_glTexCoord2f() = 0;
    virtual void RB_glVertex2i() = 0;
    virtual void RB_glVertex3f() = 0;
    virtual void RB_glVertex3fv() = 0;
    virtual void RB_Hyperspace() = 0;
    virtual void RB_IterateStagesGeneric() = 0;
    virtual void RB_IterateStagesGenericARB(int p1) = 0;
    virtual void RB_IterateStagesGenericATI() = 0;
    virtual void RB_IterateStagesGenericNV(int p1) = 0;
    virtual void RB_LookupColor(byte p1, int* p2) = 0;
    virtual void RB_MakeNormalVectors(float* p1, float* p2, float* p3) = 0;
    virtual u32 RB_PickBufferOffsetARB(u32* p1, int p2, u32 p3) = 0;
    virtual u32 RB_PickBufferOffsetATI(u32* p1, int p2, u32 p3) = 0;
    virtual void RB_ProjectionShadowDeform() = 0;
    virtual void RB_RenderDrawSurfList(u32* p1, int p2) = 0;
    virtual void RB_RenderFlare(int p1) = 0;
    virtual void RB_RenderFlares() = 0;
    virtual int RB_SaveScreen(int p1) = 0;
    virtual void RB_SelectStorage(int p1) = 0;
    virtual void RB_SelectStorageATI(int p1) = 0;
    virtual void RB_SelectStorageNV(int p1) = 0;
    virtual int RB_SetColor(int p1) = 0;
    virtual void RB_SetGL2D() = 0;
    virtual void RB_SetIteratorFog() = 0;
    virtual void RB_SetModelMatrixForRigidSurface() = 0;
    virtual void RB_SetSurfaceCountColor(int p1) = 0;
    virtual void RB_SetupClientTmu(u32 p1, int p2) = 0;
    virtual void RB_SetupClientTmuATI(u32 p1, int p2) = 0;
    virtual void RB_SetupLight(int p1) = 0;
    virtual void RB_SetupMultitexture(int p1) = 0;
    virtual void RB_SetupMultitextureATI(int p1) = 0;
    virtual void RB_SetupRegisterCombiners(int p1) = 0;
    virtual void RB_SetupStage(int p1) = 0;
    virtual void RB_SetupStageATI(int p1) = 0;
    virtual void RB_SetupTmu(int p1, int p2) = 0;
    virtual void RB_SetupVertexProgram(int p1) = 0;
    virtual void RB_ShadowFinish() = 0;
    virtual void RB_ShadowTessEnd() = 0;
    virtual void RB_ShowImages() = 0;
    virtual void RB_SingleStageGeneric(int p1, int p2, short* p3) = 0;
    virtual void RB_SingleStageGenericARB(u32* p1, int p2) = 0;
    virtual void RB_SingleStageGenericARB2(u32* p1, int p2) = 0;
    virtual void RB_SingleStageGenericATI(u32* p1) = 0;
    virtual void RB_SingleStageGenericNV(u32* p1, int p2) = 0;
    virtual void RB_StageIteratorGeneric(int p1) = 0;
    virtual void RB_StageIteratorGenericARB(int p1) = 0;
    virtual void RB_StageIteratorGenericATI(int p1) = 0;
    virtual void RB_StageIteratorGenericNV(int p1) = 0;
    virtual void RB_StageIteratorSky() = 0;
    virtual int RB_StretchPic(int p1) = 0;
    virtual int RB_StretchPicGradient(int p1) = 0;
    virtual void RB_StretchPicRotate() = 0;
    virtual void RB_SurfaceAxis() = 0;
    virtual void RB_SurfaceBad() = 0;
    virtual void RB_SurfaceBeam() = 0;
    virtual void RB_SurfaceCylinder() = 0;
    virtual void RB_SurfaceEntity() = 0;
    virtual void RB_SurfaceLightningBolt() = 0;
    virtual void RB_SurfaceLine() = 0;
    virtual void RB_SurfaceOptimized(int p1) = 0;
    virtual void RB_SurfaceOrientedQuad() = 0;
    virtual void RB_SurfacePolychain(int p1) = 0;
    virtual void RB_SurfaceRailCore() = 0;
    virtual void RB_SurfaceRailRings() = 0;
    virtual void RB_SurfaceSkip() = 0;
    virtual void RB_SurfaceSplash() = 0;
    virtual void RB_SurfaceSprite() = 0;
    virtual void RB_SurfaceStaticModel(int p1) = 0;
    virtual void RB_SurfaceStaticModelATI(int* p1) = 0;
    virtual void RB_SurfaceStaticModelCached(int p1) = 0;
    virtual void RB_SurfaceStaticModelT2N3V3_ARB(int p1) = 0;
    virtual void RB_SurfaceStaticModelT2N3V3_Generic(int p1) = 0;
    virtual void RB_SurfaceStaticModelT2N3V3_NV(int p1) = 0;
    virtual void RB_SurfaceStaticModelT2V3_ARB(int p1) = 0;
    virtual void RB_SurfaceStaticModelT2V3_Generic(int p1) = 0;
    virtual void RB_SurfaceStaticModelT2V3_NV(int p1) = 0;
    virtual void RB_SurfaceTriangles(int p1) = 0;
    virtual void RB_SurfaceXModelRigid(int p1) = 0;
    virtual void RB_SurfaceXModelRigidARB(int p1) = 0;
    virtual void RB_SurfaceXModelRigidATI(int p1) = 0;
    virtual void RB_SurfaceXModelRigidNV(int p1) = 0;
    virtual void RB_SurfaceXModelRigidSSE(int p1) = 0;
    virtual void RB_SurfaceXModelWeight(int p1) = 0;
    virtual void RB_SurfaceXModelWeightSSE(int p1) = 0;
    virtual int RB_SwapBuffers(int p1) = 0;
    virtual void RB_TestFlare(int p1) = 0;
    virtual int RB_Text_Paint(int p1) = 0;
    virtual void RB_Text_PaintChar() = 0;
    virtual void RB_Text_PaintWithCursor() = 0;
    virtual void RB_UpdateColor(float* p1, float* p2) = 0;
    virtual void RB_UpdateColorInternal(float* p1, char* p2) = 0;
    virtual void RB_UpdateSunFlare(int p1) = 0;
    virtual void RB_UploadWaterTexture(int* p1, int p2, int p3) = 0;
    virtual void RE_AddCoronaToScene(double* p1) = 0;
    virtual void RE_AddLightToScene(double* p1) = 0;
    virtual void RE_AddPlume(double* p1, int p2, double* p3, int p4) = 0;
    virtual void RE_AddPolysToScene(int p1, int p2, int p3, int p4) = 0;
    virtual void RE_AddPolyToScene(int p1, int p2, void* p3) = 0;
    virtual void RE_AddRefEntityToScene(int* p1, int p2) = 0;
    virtual void RE_BeginFrame(int p1) = 0;
    virtual void RE_BeginRegistration(int p1) = 0;
    virtual void RE_BlendSavedScreen(int p1) = 0;
    virtual void RE_ClearFlares() = 0;
    virtual void RE_ClearScene() = 0;
    virtual void RE_CubemapShot(int p1, int p2, int p3) = 0;
    virtual void RE_CubemapWaterShot(int p1, int p2, int p3, float* p4, float* p5) = 0;
    virtual void RE_DrawQuadPic(double* p1, double* p2, int p3) = 0;
    virtual void RE_EndFrame(int* p1, int* p2) = 0;
    virtual void RE_EndRegistration() = 0;
    virtual void RE_FinishLoadingModels() = 0;
    virtual void RE_GetFarPlaneDist() = 0;
    virtual char* RE_GetFontLanguageDAT(char* p1) = 0;
    virtual char* RE_GetFontLanguageTGA(char* p1) = 0;
    virtual u32 RE_GetIgnorePrecacheErrors() = 0;
    virtual int RE_GetImageMemory() = 0;
    virtual int RE_GetShaderFromModel(int p1, int p2) = 0;
    virtual char* RE_GetShaderName(int p1) = 0;
    virtual int RE_GetXModelByHandle(int p1) = 0;
    virtual void RE_LoadWorldMap(char* p1, u32* p2) = 0;
    virtual void RE_LocateDebugLines(int p1, int p2) = 0;
    virtual void RE_LocateDebugStrings(int p1, int p2) = 0;
    virtual int RE_MarkFragments(int p1, float* p2, float* p3, double* p4, int p5, int p6, int p7,
                                 int p8, int* p9, int p10) = 0;
    virtual int RE_PickShader(float* p1, float* p2, char* p3, char* p4, char* p5, size_t p6) = 0;
    virtual void RE_RegisterFont(int p1, int p2, int* p3, int p4) = 0;
    virtual u32 RE_RegisterModel(char* p1, int p2) = 0;
    virtual int RE_RegisterShader(char* p1, int p2) = 0;
    virtual int RE_RegisterShaderNoMip(char* p1, int p2) = 0;
    virtual void RE_RenderScene(int* p1) = 0;
    virtual int RE_RestoreFogState(void* p1, u32 p2) = 0;
    virtual int RE_SaveFogState(void* p1, u32 p2) = 0;
    virtual void RE_SaveScreen() = 0;
    virtual void RE_SetColor(float* p1) = 0;
    virtual void RE_SetCullDist() = 0;
    virtual void RE_SetIgnorePrecacheErrors(int p1) = 0;
    virtual void RE_Shutdown(int p1) = 0;
    virtual void RE_StretchPic() = 0;
    virtual void RE_StretchPicGradient(char p1, char p2, char p3, char p4, char p5, char p6,
                                       char p7, char p8, int p9, float* p10, int p11) = 0;
    virtual void RE_StretchPicRotate(char p1, char p2, char p3, char p4, char p5, char p6, char p7,
                                     char p8, char p9, int p10) = 0;
    virtual void RE_StretchRaw(char p1, char p2, char p3, char p4, char p5, char p6, char p7,
                               char p8, int p9) = 0;
    virtual void RE_Text_ConsolePaint(int p1, int p2, int p3, int p4, double* p5, short* p6,
                                      int* p7, int p8, int p9) = 0;
    virtual void RE_Text_ConsoleWidth() = 0;
    virtual int RE_Text_Height() = 0;
    virtual void RE_Text_Paint(int p1, int p2, int p3, int p4, float* p5, char* p6, int p7,
                               size_t p8, int p9) = 0;
    virtual void RE_Text_PaintWithCursor(int p1, int p2, int p3, int p4, float* p5, char* p6,
                                         int p7, char p8, int p9, size_t p10, int p11) = 0;
    virtual void RE_Text_Width() = 0;
    virtual void RE_TrackStatistics(int p1) = 0;
    virtual void RE_UploadCinematic(int p1, int p2, u32 p3, u32 p4, int p5, int p6, int p7) = 0;
    #endif
};

} // namespace iocod

#endif // RENDERER_RENDERER_H
